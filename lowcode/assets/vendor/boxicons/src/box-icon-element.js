import animationsCss from"../css/animations.css";import transformationsCss from"../css/transformations.css";const GLOBAL=window;const CACHE={};const CSS_CLASS_PREFIX="bx-";const CSS_CLASS_PREFIX_ROTATE=`${CSS_CLASS_PREFIX}rotate-`;const CSS_CLASS_PREFIX_FLIP=`${CSS_CLASS_PREFIX}flip-`;const TEMPLATE=document.createElement("template");const usingShadyCss=()=>!!GLOBAL.ShadyCSS;TEMPLATE.innerHTML=`\n<style>\n:host {\n  display: inline-block;\n  font-size: initial;\n  box-sizing: border-box;\n  width: 24px;\n  height: 24px;\n}\n:host([size=xs]) {\n    width: 0.8rem;\n    height: 0.8rem;\n}\n:host([size=sm]) {\n    width: 1.55rem;\n    height: 1.55rem;\n}\n:host([size=md]) {\n    width: 2.25rem;\n    height: 2.25rem;\n}\n:host([size=lg]) {\n    width: 3.0rem;\n    height: 3.0rem;\n}\n\n:host([size]:not([size=""]):not([size=xs]):not([size=sm]):not([size=md]):not([size=lg])) {\n    width: auto;\n    height: auto;\n}\n:host([pull=left]) #icon {\n    float: left;\n    margin-right: .3em!important;\n}\n:host([pull=right]) #icon {\n    float: right;\n    margin-left: .3em!important;\n}\n:host([border=square]) #icon {\n    padding: .25em;\n    border: .07em solid rgba(0,0,0,.1);\n    border-radius: .25em;\n}\n:host([border=circle]) #icon {\n    padding: .25em;\n    border: .07em solid rgba(0,0,0,.1);\n    border-radius: 50%;\n}\n#icon,\nsvg {\n  width: 100%;\n  height: 100%;\n}\n#icon {\n    box-sizing: border-box;\n} \n${animationsCss}\n${transformationsCss}\n</style>\n<div id="icon"></div>`;export class BoxIconElement extends HTMLElement{static get cdnUrl(){return`//unpkg.com/boxicons@${BUILD.DATA.VERSION}/svg`}static get tagName(){return"box-icon"}static get observedAttributes(){return["type","name","color","size","rotate","flip","animation","border","pull"]}static getIconSvg(iconName,type){var iconUrl=`${this.cdnUrl}/regular/bx-${iconName}.svg`;if(type==="solid"){iconUrl=`${this.cdnUrl}/solid/bxs-${iconName}.svg`}else if(type==="logo"){iconUrl=`${this.cdnUrl}/logos/bxl-${iconName}.svg`}if(iconUrl&&CACHE[iconUrl]){return CACHE[iconUrl]}CACHE[iconUrl]=new Promise(((resolve,reject)=>{const request=new XMLHttpRequest;request.addEventListener("load",(function(){if(this.status<200||this.status>=300){reject(new Error(`${this.status} ${this.responseText}`));return}resolve(this.responseText)}));request.onerror=reject;request.onabort=reject;request.open("GET",iconUrl);request.send()}));return CACHE[iconUrl]}static define(tagName){tagName=tagName||this.tagName;if(usingShadyCss()){GLOBAL.ShadyCSS.prepareTemplate(TEMPLATE,tagName)}customElements.define(tagName,this)}constructor(){super();this.$ui=this.attachShadow({mode:"open"});this.$ui.appendChild(this.ownerDocument.importNode(TEMPLATE.content,true));if(usingShadyCss()){GLOBAL.ShadyCSS.styleElement(this)}this._state={$iconHolder:this.$ui.getElementById("icon"),type:this.getAttribute("type")}}attributeChangedCallback(attr,oldVal,newVal){const $iconHolder=this._state.$iconHolder;switch(attr){case"type":handleTypeChange(this,oldVal,newVal);break;case"name":handleNameChange(this,oldVal,newVal);break;case"color":$iconHolder.style.fill=newVal||"";break;case"size":handleSizeChange(this,oldVal,newVal);break;case"rotate":if(oldVal){$iconHolder.classList.remove(`${CSS_CLASS_PREFIX_ROTATE}${oldVal}`)}if(newVal){$iconHolder.classList.add(`${CSS_CLASS_PREFIX_ROTATE}${newVal}`)}break;case"flip":if(oldVal){$iconHolder.classList.remove(`${CSS_CLASS_PREFIX_FLIP}${oldVal}`)}if(newVal){$iconHolder.classList.add(`${CSS_CLASS_PREFIX_FLIP}${newVal}`)}break;case"animation":if(oldVal){$iconHolder.classList.remove(`${CSS_CLASS_PREFIX}${oldVal}`)}if(newVal){$iconHolder.classList.add(`${CSS_CLASS_PREFIX}${newVal}`)}break}}connectedCallback(){if(usingShadyCss()){GLOBAL.ShadyCSS.styleElement(this)}}}function handleTypeChange(inst,oldVal,newVal){const state=inst._state;state.$iconHolder.textContent="";if(state.type){state.type=null}if(newVal&&(newVal==="solid"||newVal==="logo")){state.type=newVal}else{state.type="regular"}if(state.currentName!==undefined){inst.constructor.getIconSvg(state.currentName,state.type).then((iconData=>{if(state.type===newVal){state.$iconHolder.innerHTML=iconData}})).catch((error=>{console.error(`Failed to load icon: ${state.currentName+"\n"}${error}`)}))}}function handleNameChange(inst,oldVal,newVal){const state=inst._state;state.currentName=newVal;state.$iconHolder.textContent="";if(newVal){if(state.type!==undefined){inst.constructor.getIconSvg(newVal,state.type).then((iconData=>{if(state.currentName===newVal){state.$iconHolder.innerHTML=iconData}})).catch((error=>{console.error(`Failed to load icon: ${newVal+"\n"}${error}`)}))}}}function handleSizeChange(inst,oldVal,newVal){const state=inst._state;if(state.size){state.$iconHolder.style.width=state.$iconHolder.style.height="";state.size=state.sizeType=null}if(newVal&&!/^(xs|sm|md|lg)$/.test(state.size)){state.size=newVal.trim();state.$iconHolder.style.width=state.$iconHolder.style.height=state.size}}export default BoxIconElement;